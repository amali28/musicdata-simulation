{"ast":null,"code":"import _classCallCheck from \"/home/ubuntu/workspace/react-front-end/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/ubuntu/workspace/react-front-end/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/ubuntu/workspace/react-front-end/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/ubuntu/workspace/react-front-end/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/ubuntu/workspace/react-front-end/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/ubuntu/workspace/react-front-end/src/createPlaylistForm.js\";\nimport React from 'react';\nimport { Col, Row, Button, Form, FormGroup, Label, Input, FormText, ListGroup, ListGroupItem, ButtonGroup } from 'reactstrap';\n\nvar Example =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Example, _React$Component);\n\n  function Example(props) {\n    _classCallCheck(this, Example);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Example).call(this, props));\n  }\n\n  _createClass(Example, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this = this;\n\n      fetch('https://se3309-final-project-amali28.c9users.io:8081/retrievePlaylistSongs').then(function (res) {\n        return res.json();\n      }).then(function (json) {\n        _this.setState({\n          isloaded: true,\n          songsForPlaylist: json\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          isloaded = _this$state.isloaded,\n          songsForPlaylist = _this$state.songsForPlaylist;\n      return React.createElement(Form, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, React.createElement(Row, {\n        form: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, React.createElement(Col, {\n        md: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"Playlist\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, \"Create a Playlist\"), React.createElement(Input, {\n        type: \"text\",\n        name: \"Playlist\",\n        id: \"exampleEmail\",\n        placeholder: \"Enter playlist name...\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      })))), React.createElement(ListGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, songsForPlaylist.map(function (songs) {\n        return React.createElement(ListGroupItem, {\n          key: songs.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43\n          },\n          __self: this\n        }, songs.songName);\n      })), React.createElement(Button, {\n        id: \"createPlaylist\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, \"Create\"));\n    }\n  }, {\n    key: \"retrieveSongs\",\n    value: function retrieveSongs() {}\n  }]);\n\n  return Example;\n}(React.Component);\n\nexport { Example as default };","map":{"version":3,"sources":["/home/ubuntu/workspace/react-front-end/src/createPlaylistForm.js"],"names":["React","Col","Row","Button","Form","FormGroup","Label","Input","FormText","ListGroup","ListGroupItem","ButtonGroup","Example","props","fetch","then","res","json","setState","isloaded","songsForPlaylist","state","map","songs","id","songName","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,MAAnB,EAA2BC,IAA3B,EAAiCC,SAAjC,EAA4CC,KAA5C,EAAmDC,KAAnD,EAA0DC,QAA1D,EAAoEC,SAApE,EAA+EC,aAA/E,EAA8FC,WAA9F,QAAiH,YAAjH;;IAEqBC,O;;;;;AAEnB,mBAAaC,KAAb,EAAmB;AAAA;;AAAA,gFACXA,KADW;AAKlB;;;;wCAGkB;AAAA;;AACjBC,MAAAA,KAAK,CAAC,4EAAD,CAAL,CACCC,IADD,CACM,UAAAC,GAAG;AAAA,eAAGA,GAAG,CAACC,IAAJ,EAAH;AAAA,OADT,EAECF,IAFD,CAEM,UAAAE,IAAI,EAAI;AACf,QAAA,KAAI,CAACC,QAAL,CAAc;AACTC,UAAAA,QAAQ,EAAE,IADD;AAETC,UAAAA,gBAAgB,EAAEH;AAFT,SAAd;AAIE,OAPD;AAQD;;;6BAGQ;AAAA,wBAC2B,KAAKI,KADhC;AAAA,UACHF,QADG,eACHA,QADG;AAAA,UACOC,gBADP,eACOA,gBADP;AAGP,aAEE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,GAAD;AAAK,QAAA,IAAI,MAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,KAAD;AAAO,QAAA,GAAG,EAAC,UAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BADF,EAEE,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,IAAI,EAAC,UAAxB;AAAmC,QAAA,EAAE,EAAC,cAAtC;AAAqD,QAAA,WAAW,EAAC,wBAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CADF,CADF,CADF,EASC,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEEA,gBAAgB,CAACE,GAAjB,CAAsB,UAAAC,KAAK;AAAA,eAC7B,oBAAC,aAAD;AAAe,UAAA,GAAG,EAAIA,KAAK,CAACC,EAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACCD,KAAK,CAACE,QADP,CAD6B;AAAA,OAA3B,CAFF,CATD,EAoBE,oBAAC,MAAD;AAAQ,QAAA,EAAE,EAAC,gBAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBApBF,CAFF;AA4BD;;;oCACe,CAEf;;;;EAxDkCzB,KAAK,CAAC0B,S;;SAAtBd,O","sourcesContent":["import React from 'react';\nimport { Col, Row, Button, Form, FormGroup, Label, Input, FormText, ListGroup, ListGroupItem, ButtonGroup } from 'reactstrap';\n\nexport default class Example extends React.Component {\n  \n  constructor (props){\n    super(props);\n\n\n  \n  }\n\n  \n  componentDidMount(){\n    fetch('https://se3309-final-project-amali28.c9users.io:8081/retrievePlaylistSongs')\n    .then(res=> res.json())\n    .then(json => {\n   this.setState({\n        isloaded: true,\n        songsForPlaylist: json,\n      })\n    });\n  }\n  \n  \n  render() {\n    var{isloaded, songsForPlaylist} = this.state;\n  \n    return (\n     \n      <Form>\n        <Row form>\n          <Col md={6}>\n            <FormGroup>\n              <Label for=\"Playlist\">Create a Playlist</Label>\n              <Input type=\"text\" name=\"Playlist\" id=\"exampleEmail\" placeholder=\"Enter playlist name...\" />\n            </FormGroup>\n          </Col>\n        </Row>\n       <ListGroup>\n        \n        {songsForPlaylist.map (songs =>  (\n\t      <ListGroupItem key = {songs.id}> \n\t     \t{songs.songName}\n        \t</ListGroupItem>\n      ))}\n        \n        \n        \n        </ListGroup>\n        <Button id=\"createPlaylist\">Create</Button>\n      </Form>\n    );\n    \n    \n   \n  }\n  retrieveSongs() {\n \n  }\n}\n\n"]},"metadata":{},"sourceType":"module"}